# Global Object Identification ... 全データを共通のIDでユニーク化
interface Node {
    id: ID!
}

schema {
    query: Query
    mutation: Mutation
}

type Query {
    node(id: ID!): Node
}

type Mutation {
    noop(input: NoopInput): NoopPayload
}

input NoopInput {
    clientMutationId: String
}

type NoopPayload {
    clientMutationId: String
}

# 検索処理時の基本条件
# 検索条件、ソート条件、表示件数等を備える
input BaseCondition {
    # 文字列フィルタ（パターンマッチ種別の選択可）※NULLの場合は、未指定（＝全検索）を表す
    searchWordCondition: SearchWordCondition
    # ソート条件　※NULLの場合は、未指定（＝サーバ側デフォルトオーダー）を表す
    sortCondition: SortCondition
    # 検索方向（いわゆる「次ページ遷移」か「前ページ遷移」か）※NONEの場合は、ページングではない初期検索を表す
    searchDirection: SearchDirection!
    # 表示件数
    limit: Int
    # 現在表示ページの１行目のカーソル（検索結果のPageInfoに含まれるstartCursor）
    startCursor: Cursor
    # 現在表示ページの最終行のカーソル（検索結果のPageInfoに含まれるendCursor）
    endCursor: Cursor
}

# 検索条件
input SearchWordCondition {
    searchWord: String!
    patternMatch: PatternMatch  # 未指定時は「完全一致」
}

enum PatternMatch {
    # 完全一致
    EXACT_MATCH
    # 部分一致
    PARTIAL_MATCH
    # 前方一致
    FORWARD_MATCH
    # 後方一致
    BACKWARD_MATCH
}

# ソート条件
input SortCondition {
    sortKey: String!
    sortOrder: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

# 検索方向
enum SearchDirection {
    NONE
    PREV
    NEXT
}

scalar Cursor

# 検索／ページングにおけるページ情報
type PageInfo {
    startCursor: Cursor
    endCursor: Cursor
    hasPrevPage: Boolean!
    hasNextPage: Boolean!
}
